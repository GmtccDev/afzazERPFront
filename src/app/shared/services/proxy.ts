// /* tslint:disable */
// /* eslint-disable */
// //----------------------
// // <auto-generated>
// //     Generated using the NSwag toolchain v13.1.5.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// // </auto-generated>
// //----------------------
// // ReSharper disable InconsistentNaming

// import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
// import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
// import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
// import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';



// export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

// @Injectable()
// export class BusinessServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl ? baseUrl : "";
//     }

//     /**
//      * @param query (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getDdl(query: GetAllBusinesssQuery | undefined, api_version: string | undefined, language: any | undefined): Observable<BusinessDto[]> {
//         let url_ = this.baseUrl + "/api/Business/get-ddl?";
//         if (query === null)
//             throw new Error("The parameter 'query' cannot be null.");
//         else if (query !== undefined)
//             url_ += "query=" + encodeURIComponent("" + query) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetDdl(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetDdl(<any>response_);
//                 } catch (e) {
//                     return <Observable<BusinessDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<BusinessDto[]>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetDdl(response: HttpResponseBase): Observable<BusinessDto[]> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200.push(BusinessDto.fromJS(item));
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<BusinessDto[]>(<any>null);
//     }

//     /**
//      * @param pageIndex (optional) 
//      * @param pageSize (optional) 
//      * @param sortBy (optional) 
//      * @param sortOrder (optional) 
//      * @param filter (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     all(pageIndex: number | undefined, pageSize: number | undefined, sortBy: string | undefined, sortOrder: string | undefined, filter: string | undefined, api_version: string | undefined, language: any | undefined): Observable<BusinessDtoPageList> {
//         let url_ = this.baseUrl + "/api/Business/all?";
//         if (pageIndex === null)
//             throw new Error("The parameter 'pageIndex' cannot be null.");
//         else if (pageIndex !== undefined)
//             url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
//         if (pageSize === null)
//             throw new Error("The parameter 'pageSize' cannot be null.");
//         else if (pageSize !== undefined)
//             url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
//         if (sortBy === null)
//             throw new Error("The parameter 'sortBy' cannot be null.");
//         else if (sortBy !== undefined)
//             url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&"; 
//         if (sortOrder === null)
//             throw new Error("The parameter 'sortOrder' cannot be null.");
//         else if (sortOrder !== undefined)
//             url_ += "SortOrder=" + encodeURIComponent("" + sortOrder) + "&"; 
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAll(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAll(<any>response_);
//                 } catch (e) {
//                     return <Observable<BusinessDtoPageList>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<BusinessDtoPageList>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAll(response: HttpResponseBase): Observable<BusinessDtoPageList> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = BusinessDtoPageList.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<BusinessDtoPageList>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     add(api_version: string | undefined, language: any | undefined, body: CreateBusinessCommand | undefined): Observable<BusinessDto> {
//         let url_ = this.baseUrl + "/api/Business/add?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAdd(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAdd(<any>response_);
//                 } catch (e) {
//                     return <Observable<BusinessDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<BusinessDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAdd(response: HttpResponseBase): Observable<BusinessDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = BusinessDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<BusinessDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     edit(api_version: string | undefined, language: any | undefined, body: EditBusinessCommand | undefined): Observable<BusinessDto> {
//         let url_ = this.baseUrl + "/api/Business/edit?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEdit(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEdit(<any>response_);
//                 } catch (e) {
//                     return <Observable<BusinessDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<BusinessDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processEdit(response: HttpResponseBase): Observable<BusinessDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = BusinessDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<BusinessDto>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     delete(id: number | undefined, api_version: string | undefined, language: any | undefined): Observable<BusinessDto> {
//         let url_ = this.baseUrl + "/api/Business/delete?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<BusinessDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<BusinessDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processDelete(response: HttpResponseBase): Observable<BusinessDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = BusinessDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<BusinessDto>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getById(id: number | undefined, api_version: string | undefined, language: any | undefined): Observable<BusinessDto> {
//         let url_ = this.baseUrl + "/api/Business/getById?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetById(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetById(<any>response_);
//                 } catch (e) {
//                     return <Observable<BusinessDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<BusinessDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetById(response: HttpResponseBase): Observable<BusinessDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = BusinessDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<BusinessDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getLastCode(api_version: string | undefined, language: any | undefined): Observable<string> {
//         let url_ = this.baseUrl + "/api/Business/getLastCode?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetLastCode(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetLastCode(<any>response_);
//                 } catch (e) {
//                     return <Observable<string>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<string>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetLastCode(response: HttpResponseBase): Observable<string> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<string>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     deleteList(api_version: string | undefined, language: any | undefined, body: DeleteListBusinessCommand | undefined): Observable<BusinessDto> {
//         let url_ = this.baseUrl + "/api/Business/deleteList?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDeleteList(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDeleteList(<any>response_);
//                 } catch (e) {
//                     return <Observable<BusinessDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<BusinessDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processDeleteList(response: HttpResponseBase): Observable<BusinessDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = BusinessDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<BusinessDto>(<any>null);
//     }
// }

// @Injectable()
// export class CountryServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl ? baseUrl : "";
//     }

//     /**
//      * @param query (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getDdl(query: GetAllCountriesQuery | undefined, api_version: string | undefined, language: any | undefined): Observable<CountryDto[]> {
//         let url_ = this.baseUrl + "/api/Country/get-ddl?";
//         if (query === null)
//             throw new Error("The parameter 'query' cannot be null.");
//         else if (query !== undefined)
//             url_ += "query=" + encodeURIComponent("" + query) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetDdl(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetDdl(<any>response_);
//                 } catch (e) {
//                     return <Observable<CountryDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CountryDto[]>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetDdl(response: HttpResponseBase): Observable<CountryDto[]> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200.push(CountryDto.fromJS(item));
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CountryDto[]>(<any>null);
//     }

//     /**
//      * @param pageIndex (optional) 
//      * @param pageSize (optional) 
//      * @param sortBy (optional) 
//      * @param sortOrder (optional) 
//      * @param filter (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     all(pageIndex: number | undefined, pageSize: number | undefined, sortBy: string | undefined, sortOrder: string | undefined, filter: string | undefined, api_version: string | undefined, language: any | undefined): Observable<CountryDtoPageList> {
//         let url_ = this.baseUrl + "/api/Country/all?";
//         if (pageIndex === null)
//             throw new Error("The parameter 'pageIndex' cannot be null.");
//         else if (pageIndex !== undefined)
//             url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
//         if (pageSize === null)
//             throw new Error("The parameter 'pageSize' cannot be null.");
//         else if (pageSize !== undefined)
//             url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
//         if (sortBy === null)
//             throw new Error("The parameter 'sortBy' cannot be null.");
//         else if (sortBy !== undefined)
//             url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&"; 
//         if (sortOrder === null)
//             throw new Error("The parameter 'sortOrder' cannot be null.");
//         else if (sortOrder !== undefined)
//             url_ += "SortOrder=" + encodeURIComponent("" + sortOrder) + "&"; 
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAll(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAll(<any>response_);
//                 } catch (e) {
//                     return <Observable<CountryDtoPageList>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CountryDtoPageList>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAll(response: HttpResponseBase): Observable<CountryDtoPageList> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CountryDtoPageList.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CountryDtoPageList>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     add(api_version: string | undefined, language: any | undefined, body: CreateCountryCommand | undefined): Observable<CountryDto> {
//         let url_ = this.baseUrl + "/api/Country/add?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAdd(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAdd(<any>response_);
//                 } catch (e) {
//                     return <Observable<CountryDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CountryDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAdd(response: HttpResponseBase): Observable<CountryDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CountryDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CountryDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     edit(api_version: string | undefined, language: any | undefined, body: EditCountryCommand | undefined): Observable<CountryDto> {
//         let url_ = this.baseUrl + "/api/Country/edit?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEdit(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEdit(<any>response_);
//                 } catch (e) {
//                     return <Observable<CountryDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CountryDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processEdit(response: HttpResponseBase): Observable<CountryDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CountryDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CountryDto>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     delete(id: number | undefined, api_version: string | undefined, language: any | undefined): Observable<CountryDto> {
//         let url_ = this.baseUrl + "/api/Country/delete?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<CountryDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CountryDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processDelete(response: HttpResponseBase): Observable<CountryDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CountryDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CountryDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     deleteList(api_version: string | undefined, language: any | undefined, body: DeleteListCountryCommand | undefined): Observable<number> {
//         let url_ = this.baseUrl + "/api/Country/deleteList?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDeleteList(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDeleteList(<any>response_);
//                 } catch (e) {
//                     return <Observable<number>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<number>><any>_observableThrow(response_);
//         }));
//     }

//     protected processDeleteList(response: HttpResponseBase): Observable<number> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<number>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getById(id: number | undefined, api_version: string | undefined, language: any | undefined): Observable<CountryDto> {
//         let url_ = this.baseUrl + "/api/Country/getById?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetById(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetById(<any>response_);
//                 } catch (e) {
//                     return <Observable<CountryDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CountryDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetById(response: HttpResponseBase): Observable<CountryDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CountryDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CountryDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getLastCode(api_version: string | undefined, language: any | undefined): Observable<string> {
//         let url_ = this.baseUrl + "/api/Country/getLastCode?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetLastCode(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetLastCode(<any>response_);
//                 } catch (e) {
//                     return <Observable<string>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<string>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetLastCode(response: HttpResponseBase): Observable<string> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<string>(<any>null);
//     }
// }

// @Injectable()
// export class CurrencyServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl ? baseUrl : "";
//     }

//     /**
//      * @param query (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getDdl(query: GetAllCurrenciesQuery | undefined, api_version: string | undefined, language: any | undefined): Observable<CurrencyDto[]> {
//         let url_ = this.baseUrl + "/api/Currency/get-ddl?";
//         if (query === null)
//             throw new Error("The parameter 'query' cannot be null.");
//         else if (query !== undefined)
//             url_ += "query=" + encodeURIComponent("" + query) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetDdl(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetDdl(<any>response_);
//                 } catch (e) {
//                     return <Observable<CurrencyDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CurrencyDto[]>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetDdl(response: HttpResponseBase): Observable<CurrencyDto[]> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200.push(CurrencyDto.fromJS(item));
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CurrencyDto[]>(<any>null);
//     }

//     /**
//      * @param pageIndex (optional) 
//      * @param pageSize (optional) 
//      * @param sortBy (optional) 
//      * @param sortOrder (optional) 
//      * @param filter (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     all(pageIndex: number | undefined, pageSize: number | undefined, sortBy: string | undefined, sortOrder: string | undefined, filter: string | undefined, api_version: string | undefined, language: any | undefined): Observable<CurrencyDtoPageList> {
//         let url_ = this.baseUrl + "/api/Currency/all?";
//         if (pageIndex === null)
//             throw new Error("The parameter 'pageIndex' cannot be null.");
//         else if (pageIndex !== undefined)
//             url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
//         if (pageSize === null)
//             throw new Error("The parameter 'pageSize' cannot be null.");
//         else if (pageSize !== undefined)
//             url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
//         if (sortBy === null)
//             throw new Error("The parameter 'sortBy' cannot be null.");
//         else if (sortBy !== undefined)
//             url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&"; 
//         if (sortOrder === null)
//             throw new Error("The parameter 'sortOrder' cannot be null.");
//         else if (sortOrder !== undefined)
//             url_ += "SortOrder=" + encodeURIComponent("" + sortOrder) + "&"; 
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAll(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAll(<any>response_);
//                 } catch (e) {
//                     return <Observable<CurrencyDtoPageList>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CurrencyDtoPageList>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAll(response: HttpResponseBase): Observable<CurrencyDtoPageList> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CurrencyDtoPageList.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CurrencyDtoPageList>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     add(api_version: string | undefined, language: any | undefined, body: CreateCurrencyCommand | undefined): Observable<CurrencyDto> {
//         let url_ = this.baseUrl + "/api/Currency/add?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAdd(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAdd(<any>response_);
//                 } catch (e) {
//                     return <Observable<CurrencyDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CurrencyDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAdd(response: HttpResponseBase): Observable<CurrencyDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CurrencyDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CurrencyDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     edit(api_version: string | undefined, language: any | undefined, body: EditCurrencyCommand | undefined): Observable<CurrencyDto> {
//         let url_ = this.baseUrl + "/api/Currency/edit?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEdit(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEdit(<any>response_);
//                 } catch (e) {
//                     return <Observable<CurrencyDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CurrencyDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processEdit(response: HttpResponseBase): Observable<CurrencyDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CurrencyDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CurrencyDto>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     delete(id: number | undefined, api_version: string | undefined, language: any | undefined): Observable<CurrencyDto> {
//         let url_ = this.baseUrl + "/api/Currency/delete?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<CurrencyDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CurrencyDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processDelete(response: HttpResponseBase): Observable<CurrencyDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CurrencyDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CurrencyDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     deleteListCurrency(api_version: string | undefined, language: any | undefined, body: DeleteListCurrencyCommand | undefined): Observable<number> {
//         let url_ = this.baseUrl + "/api/Currency/delete-list-currency?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDeleteListCurrency(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDeleteListCurrency(<any>response_);
//                 } catch (e) {
//                     return <Observable<number>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<number>><any>_observableThrow(response_);
//         }));
//     }

//     protected processDeleteListCurrency(response: HttpResponseBase): Observable<number> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<number>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getById(id: number | undefined, api_version: string | undefined, language: any | undefined): Observable<CurrencyDto> {
//         let url_ = this.baseUrl + "/api/Currency/getById?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetById(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetById(<any>response_);
//                 } catch (e) {
//                     return <Observable<CurrencyDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CurrencyDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetById(response: HttpResponseBase): Observable<CurrencyDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CurrencyDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CurrencyDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getLastCode(api_version: string | undefined, language: any | undefined): Observable<string> {
//         let url_ = this.baseUrl + "/api/Currency/getLastCode?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetLastCode(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetLastCode(<any>response_);
//                 } catch (e) {
//                     return <Observable<string>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<string>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetLastCode(response: HttpResponseBase): Observable<string> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<string>(<any>null);
//     }
// }

// @Injectable()
// export class CustomerServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl ? baseUrl : "";
//     }

//     /**
//      * @param query (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getDdl(query: GetAllCustomersQuery | undefined, api_version: string | undefined, language: any | undefined): Observable<CustomerDto[]> {
//         let url_ = this.baseUrl + "/api/Customer/get-ddl?";
//         if (query === null)
//             throw new Error("The parameter 'query' cannot be null.");
//         else if (query !== undefined)
//             url_ += "query=" + encodeURIComponent("" + query) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetDdl(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetDdl(<any>response_);
//                 } catch (e) {
//                     return <Observable<CustomerDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CustomerDto[]>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetDdl(response: HttpResponseBase): Observable<CustomerDto[]> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200.push(CustomerDto.fromJS(item));
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CustomerDto[]>(<any>null);
//     }

//     /**
//      * @param pageIndex (optional) 
//      * @param pageSize (optional) 
//      * @param sortBy (optional) 
//      * @param sortOrder (optional) 
//      * @param filter (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     all(pageIndex: number | undefined, pageSize: number | undefined, sortBy: string | undefined, sortOrder: string | undefined, filter: string | undefined, api_version: string | undefined, language: any | undefined): Observable<CustomerDtoPageList> {
//         let url_ = this.baseUrl + "/api/Customer/all?";
//         if (pageIndex === null)
//             throw new Error("The parameter 'pageIndex' cannot be null.");
//         else if (pageIndex !== undefined)
//             url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
//         if (pageSize === null)
//             throw new Error("The parameter 'pageSize' cannot be null.");
//         else if (pageSize !== undefined)
//             url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
//         if (sortBy === null)
//             throw new Error("The parameter 'sortBy' cannot be null.");
//         else if (sortBy !== undefined)
//             url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&"; 
//         if (sortOrder === null)
//             throw new Error("The parameter 'sortOrder' cannot be null.");
//         else if (sortOrder !== undefined)
//             url_ += "SortOrder=" + encodeURIComponent("" + sortOrder) + "&"; 
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAll(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAll(<any>response_);
//                 } catch (e) {
//                     return <Observable<CustomerDtoPageList>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CustomerDtoPageList>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAll(response: HttpResponseBase): Observable<CustomerDtoPageList> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CustomerDtoPageList.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CustomerDtoPageList>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     add(api_version: string | undefined, language: any | undefined, body: CreateCustomerCommand | undefined): Observable<CustomerDto> {
//         let url_ = this.baseUrl + "/api/Customer/add?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAdd(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAdd(<any>response_);
//                 } catch (e) {
//                     return <Observable<CustomerDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CustomerDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAdd(response: HttpResponseBase): Observable<CustomerDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CustomerDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CustomerDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     edit(api_version: string | undefined, language: any | undefined, body: EditCustomerCommand | undefined): Observable<CustomerDto> {
//         let url_ = this.baseUrl + "/api/Customer/edit?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEdit(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEdit(<any>response_);
//                 } catch (e) {
//                     return <Observable<CustomerDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CustomerDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processEdit(response: HttpResponseBase): Observable<CustomerDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CustomerDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CustomerDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     verifyCode(api_version: string | undefined, language: any | undefined, body: VerifyCodeCommand | undefined): Observable<CustomerDto> {
//         let url_ = this.baseUrl + "/api/Customer/verify-code?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processVerifyCode(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processVerifyCode(<any>response_);
//                 } catch (e) {
//                     return <Observable<CustomerDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CustomerDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processVerifyCode(response: HttpResponseBase): Observable<CustomerDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CustomerDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CustomerDto>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     delete(id: number | undefined, api_version: string | undefined, language: any | undefined): Observable<CustomerDto> {
//         let url_ = this.baseUrl + "/api/Customer/delete?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<CustomerDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CustomerDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processDelete(response: HttpResponseBase): Observable<CustomerDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CustomerDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CustomerDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     deleteList(api_version: string | undefined, language: any | undefined, body: DeleteListCustomerCommand | undefined): Observable<number> {
//         let url_ = this.baseUrl + "/api/Customer/deleteList?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDeleteList(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDeleteList(<any>response_);
//                 } catch (e) {
//                     return <Observable<number>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<number>><any>_observableThrow(response_);
//         }));
//     }

//     protected processDeleteList(response: HttpResponseBase): Observable<number> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<number>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getById(id: number | undefined, api_version: string | undefined, language: any | undefined): Observable<CustomerDto> {
//         let url_ = this.baseUrl + "/api/Customer/getById?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetById(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetById(<any>response_);
//                 } catch (e) {
//                     return <Observable<CustomerDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CustomerDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetById(response: HttpResponseBase): Observable<CustomerDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = CustomerDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CustomerDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getLastCode(api_version: string | undefined, language: any | undefined): Observable<string> {
//         let url_ = this.baseUrl + "/api/Customer/getLastCode?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetLastCode(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetLastCode(<any>response_);
//                 } catch (e) {
//                     return <Observable<string>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<string>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetLastCode(response: HttpResponseBase): Observable<string> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<string>(<any>null);
//     }
// }

// @Injectable()
// export class PermissionServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl ? baseUrl : "";
//     }

//     /**
//      * @param roleId (optional) 
//      * @param pageIndex (optional) 
//      * @param pageSize (optional) 
//      * @param sortBy (optional) 
//      * @param sortOrder (optional) 
//      * @param filter (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     all(roleId: string | undefined, pageIndex: number | undefined, pageSize: number | undefined, sortBy: string | undefined, sortOrder: string | undefined, filter: string | undefined, api_version: string | undefined, language: any | undefined): Observable<GetAllPermissionDTOPageList> {
//         let url_ = this.baseUrl + "/api/Permission/all?";
//         if (roleId === null)
//             throw new Error("The parameter 'roleId' cannot be null.");
//         else if (roleId !== undefined)
//             url_ += "RoleId=" + encodeURIComponent("" + roleId) + "&"; 
//         if (pageIndex === null)
//             throw new Error("The parameter 'pageIndex' cannot be null.");
//         else if (pageIndex !== undefined)
//             url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
//         if (pageSize === null)
//             throw new Error("The parameter 'pageSize' cannot be null.");
//         else if (pageSize !== undefined)
//             url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
//         if (sortBy === null)
//             throw new Error("The parameter 'sortBy' cannot be null.");
//         else if (sortBy !== undefined)
//             url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&"; 
//         if (sortOrder === null)
//             throw new Error("The parameter 'sortOrder' cannot be null.");
//         else if (sortOrder !== undefined)
//             url_ += "SortOrder=" + encodeURIComponent("" + sortOrder) + "&"; 
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAll(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAll(<any>response_);
//                 } catch (e) {
//                     return <Observable<GetAllPermissionDTOPageList>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<GetAllPermissionDTOPageList>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAll(response: HttpResponseBase): Observable<GetAllPermissionDTOPageList> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = GetAllPermissionDTOPageList.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<GetAllPermissionDTOPageList>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     add(api_version: string | undefined, language: any | undefined, body: CreatePermissionCommand | undefined): Observable<CreatePermissionDto[]> {
//         let url_ = this.baseUrl + "/api/Permission/add?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAdd(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAdd(<any>response_);
//                 } catch (e) {
//                     return <Observable<CreatePermissionDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<CreatePermissionDto[]>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAdd(response: HttpResponseBase): Observable<CreatePermissionDto[]> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200.push(CreatePermissionDto.fromJS(item));
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<CreatePermissionDto[]>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     delete(id: number | undefined, api_version: string | undefined, language: any | undefined): Observable<boolean> {
//         let url_ = this.baseUrl + "/api/Permission/delete?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<boolean>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<boolean>><any>_observableThrow(response_);
//         }));
//     }

//     protected processDelete(response: HttpResponseBase): Observable<boolean> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<boolean>(<any>null);
//     }
// }

// @Injectable()
// export class RoleServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl ? baseUrl : "";
//     }

//     /**
//      * @param query (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getDdl(query: GetAllRolesQuery | undefined, api_version: string | undefined, language: any | undefined): Observable<RoleDto[]> {
//         let url_ = this.baseUrl + "/api/Role/get-ddl?";
//         if (query === null)
//             throw new Error("The parameter 'query' cannot be null.");
//         else if (query !== undefined)
//             url_ += "query=" + encodeURIComponent("" + query) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetDdl(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetDdl(<any>response_);
//                 } catch (e) {
//                     return <Observable<RoleDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<RoleDto[]>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetDdl(response: HttpResponseBase): Observable<RoleDto[]> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200.push(RoleDto.fromJS(item));
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<RoleDto[]>(<any>null);
//     }

//     /**
//      * @param pageIndex (optional) 
//      * @param pageSize (optional) 
//      * @param sortBy (optional) 
//      * @param sortOrder (optional) 
//      * @param filter (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     all(pageIndex: number | undefined, pageSize: number | undefined, sortBy: string | undefined, sortOrder: string | undefined, filter: string | undefined, api_version: string | undefined, language: any | undefined): Observable<RoleDtoPageList> {
//         let url_ = this.baseUrl + "/api/Role/all?";
//         if (pageIndex === null)
//             throw new Error("The parameter 'pageIndex' cannot be null.");
//         else if (pageIndex !== undefined)
//             url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
//         if (pageSize === null)
//             throw new Error("The parameter 'pageSize' cannot be null.");
//         else if (pageSize !== undefined)
//             url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
//         if (sortBy === null)
//             throw new Error("The parameter 'sortBy' cannot be null.");
//         else if (sortBy !== undefined)
//             url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&"; 
//         if (sortOrder === null)
//             throw new Error("The parameter 'sortOrder' cannot be null.");
//         else if (sortOrder !== undefined)
//             url_ += "SortOrder=" + encodeURIComponent("" + sortOrder) + "&"; 
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAll(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAll(<any>response_);
//                 } catch (e) {
//                     return <Observable<RoleDtoPageList>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<RoleDtoPageList>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAll(response: HttpResponseBase): Observable<RoleDtoPageList> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = RoleDtoPageList.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<RoleDtoPageList>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     add(api_version: string | undefined, language: any | undefined, body: CreateRoleCommand | undefined): Observable<RoleDto> {
//         let url_ = this.baseUrl + "/api/Role/add?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAdd(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAdd(<any>response_);
//                 } catch (e) {
//                     return <Observable<RoleDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<RoleDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAdd(response: HttpResponseBase): Observable<RoleDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = RoleDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<RoleDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     edit(api_version: string | undefined, language: any | undefined, body: EditRoleCommand | undefined): Observable<RoleDto> {
//         let url_ = this.baseUrl + "/api/Role/edit?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEdit(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEdit(<any>response_);
//                 } catch (e) {
//                     return <Observable<RoleDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<RoleDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processEdit(response: HttpResponseBase): Observable<RoleDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = RoleDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<RoleDto>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     delete(id: string | undefined, api_version: string | undefined, language: any | undefined): Observable<RoleDto> {
//         let url_ = this.baseUrl + "/api/Role/delete?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<RoleDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<RoleDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processDelete(response: HttpResponseBase): Observable<RoleDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = RoleDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<RoleDto>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getById(id: string | undefined, api_version: string | undefined, language: any | undefined): Observable<RoleDto> {
//         let url_ = this.baseUrl + "/api/Role/getById?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetById(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetById(<any>response_);
//                 } catch (e) {
//                     return <Observable<RoleDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<RoleDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetById(response: HttpResponseBase): Observable<RoleDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = RoleDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<RoleDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getLastCode(api_version: string | undefined, language: any | undefined): Observable<PermissionDtoCodeRole> {
//         let url_ = this.baseUrl + "/api/Role/getLastCode?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetLastCode(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetLastCode(<any>response_);
//                 } catch (e) {
//                     return <Observable<PermissionDtoCodeRole>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<PermissionDtoCodeRole>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetLastCode(response: HttpResponseBase): Observable<PermissionDtoCodeRole> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = PermissionDtoCodeRole.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<PermissionDtoCodeRole>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     deleteList(api_version: string | undefined, language: any | undefined, body: DeleteListRoleCommand | undefined): Observable<RoleDto> {
//         let url_ = this.baseUrl + "/api/Role/deleteList?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDeleteList(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDeleteList(<any>response_);
//                 } catch (e) {
//                     return <Observable<RoleDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<RoleDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processDeleteList(response: HttpResponseBase): Observable<RoleDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = RoleDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<RoleDto>(<any>null);
//     }
// }

// @Injectable()
// export class TechnicalSupportServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl ? baseUrl : "";
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     register(api_version: string | undefined, language: any | undefined, body: TechnicalSupportCommand | undefined): Observable<TechnicalSupportDto> {
//         let url_ = this.baseUrl + "/api/TechnicalSupport/Register?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processRegister(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processRegister(<any>response_);
//                 } catch (e) {
//                     return <Observable<TechnicalSupportDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<TechnicalSupportDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processRegister(response: HttpResponseBase): Observable<TechnicalSupportDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = TechnicalSupportDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<TechnicalSupportDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     login(api_version: string | undefined, language: any | undefined, body: LoginCommand | undefined): Observable<AuthorizedUserDTO> {
//         let url_ = this.baseUrl + "/api/TechnicalSupport/Login?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processLogin(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processLogin(<any>response_);
//                 } catch (e) {
//                     return <Observable<AuthorizedUserDTO>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<AuthorizedUserDTO>><any>_observableThrow(response_);
//         }));
//     }

//     protected processLogin(response: HttpResponseBase): Observable<AuthorizedUserDTO> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = AuthorizedUserDTO.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<AuthorizedUserDTO>(<any>null);
//     }
// }

// @Injectable()
// export class UserServiceProxy {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl ? baseUrl : "";
//     }

//     /**
//      * @param query (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getDdl(query: GetAllUserQuery | undefined, api_version: string | undefined, language: any | undefined): Observable<UserDto[]> {
//         let url_ = this.baseUrl + "/api/User/get-ddl?";
//         if (query === null)
//             throw new Error("The parameter 'query' cannot be null.");
//         else if (query !== undefined)
//             url_ += "query=" + encodeURIComponent("" + query) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetDdl(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetDdl(<any>response_);
//                 } catch (e) {
//                     return <Observable<UserDto[]>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<UserDto[]>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetDdl(response: HttpResponseBase): Observable<UserDto[]> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             if (Array.isArray(resultData200)) {
//                 result200 = [] as any;
//                 for (let item of resultData200)
//                     result200.push(UserDto.fromJS(item));
//             }
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<UserDto[]>(<any>null);
//     }

//     /**
//      * @param pageIndex (optional) 
//      * @param pageSize (optional) 
//      * @param sortBy (optional) 
//      * @param sortOrder (optional) 
//      * @param filter (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     all(pageIndex: number | undefined, pageSize: number | undefined, sortBy: string | undefined, sortOrder: string | undefined, filter: string | undefined, api_version: string | undefined, language: any | undefined): Observable<UserDtoPageList> {
//         let url_ = this.baseUrl + "/api/User/all?";
//         if (pageIndex === null)
//             throw new Error("The parameter 'pageIndex' cannot be null.");
//         else if (pageIndex !== undefined)
//             url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
//         if (pageSize === null)
//             throw new Error("The parameter 'pageSize' cannot be null.");
//         else if (pageSize !== undefined)
//             url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&"; 
//         if (sortBy === null)
//             throw new Error("The parameter 'sortBy' cannot be null.");
//         else if (sortBy !== undefined)
//             url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&"; 
//         if (sortOrder === null)
//             throw new Error("The parameter 'sortOrder' cannot be null.");
//         else if (sortOrder !== undefined)
//             url_ += "SortOrder=" + encodeURIComponent("" + sortOrder) + "&"; 
//         if (filter === null)
//             throw new Error("The parameter 'filter' cannot be null.");
//         else if (filter !== undefined)
//             url_ += "Filter=" + encodeURIComponent("" + filter) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAll(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAll(<any>response_);
//                 } catch (e) {
//                     return <Observable<UserDtoPageList>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<UserDtoPageList>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAll(response: HttpResponseBase): Observable<UserDtoPageList> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = UserDtoPageList.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<UserDtoPageList>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     add(api_version: string | undefined, language: any | undefined, body: CreateUserCommand | undefined): Observable<UserDto> {
//         let url_ = this.baseUrl + "/api/User/add?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAdd(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAdd(<any>response_);
//                 } catch (e) {
//                     return <Observable<UserDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<UserDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAdd(response: HttpResponseBase): Observable<UserDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = UserDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<UserDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     edit(api_version: string | undefined, language: any | undefined, body: EditUserCommand | undefined): Observable<UserDto> {
//         let url_ = this.baseUrl + "/api/User/edit?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processEdit(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processEdit(<any>response_);
//                 } catch (e) {
//                     return <Observable<UserDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<UserDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processEdit(response: HttpResponseBase): Observable<UserDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = UserDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<UserDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     addPassword(api_version: string | undefined, language: any | undefined, body: AddPasswordUserCommand | undefined): Observable<UserDto> {
//         let url_ = this.baseUrl + "/api/User/add-password?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processAddPassword(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processAddPassword(<any>response_);
//                 } catch (e) {
//                     return <Observable<UserDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<UserDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processAddPassword(response: HttpResponseBase): Observable<UserDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = UserDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<UserDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     changePassword(api_version: string | undefined, language: any | undefined, body: ChangePasswordCommand | undefined): Observable<UserDto> {
//         let url_ = this.baseUrl + "/api/User/change-password?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processChangePassword(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processChangePassword(<any>response_);
//                 } catch (e) {
//                     return <Observable<UserDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<UserDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processChangePassword(response: HttpResponseBase): Observable<UserDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = UserDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<UserDto>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     delete(id: string | undefined, api_version: string | undefined, language: any | undefined): Observable<UserDto> {
//         let url_ = this.baseUrl + "/api/User/delete?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDelete(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDelete(<any>response_);
//                 } catch (e) {
//                     return <Observable<UserDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<UserDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processDelete(response: HttpResponseBase): Observable<UserDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = UserDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<UserDto>(<any>null);
//     }

//     /**
//      * @param id (optional) 
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getById(id: string | undefined, api_version: string | undefined, language: any | undefined): Observable<UserDto> {
//         let url_ = this.baseUrl + "/api/User/getById?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "id=" + encodeURIComponent("" + id) + "&"; 
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetById(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetById(<any>response_);
//                 } catch (e) {
//                     return <Observable<UserDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<UserDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetById(response: HttpResponseBase): Observable<UserDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = UserDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<UserDto>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @return Success
//      */
//     getLastCode(api_version: string | undefined, language: any | undefined): Observable<string> {
//         let url_ = this.baseUrl + "/api/User/getLastCode?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processGetLastCode(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processGetLastCode(<any>response_);
//                 } catch (e) {
//                     return <Observable<string>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<string>><any>_observableThrow(response_);
//         }));
//     }

//     protected processGetLastCode(response: HttpResponseBase): Observable<string> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = resultData200 !== undefined ? resultData200 : <any>null;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<string>(<any>null);
//     }

//     /**
//      * @param api_version (optional) 
//      * @param language (optional) 
//      * @param body (optional) 
//      * @return Success
//      */
//     deleteList(api_version: string | undefined, language: any | undefined, body: DeleteListUserCommand | undefined): Observable<UserDto> {
//         let url_ = this.baseUrl + "/api/User/deleteList?";
//         if (api_version === null)
//             throw new Error("The parameter 'api_version' cannot be null.");
//         else if (api_version !== undefined)
//             url_ += "api-version=" + encodeURIComponent("" + api_version) + "&"; 
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Language": language !== undefined && language !== null ? "" + language : "", 
//                 "Content-Type": "application/json-patch+json", 
//                 "Accept": "text/plain"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processDeleteList(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processDeleteList(<any>response_);
//                 } catch (e) {
//                     return <Observable<UserDto>><any>_observableThrow(e);
//                 }
//             } else
//                 return <Observable<UserDto>><any>_observableThrow(response_);
//         }));
//     }

//     protected processDeleteList(response: HttpResponseBase): Observable<UserDto> {
//         const status = response.status;
//         const responseBlob = 
//             response instanceof HttpResponse ? response.body : 
//             (<any>response).error instanceof Blob ? (<any>response).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
//             result200 = UserDto.fromJS(resultData200);
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<UserDto>(<any>null);
//     }
// }

// export class AddPasswordUserCommand implements IAddPasswordUserCommand {
//     newPassword: string | undefined;
//     confirmNewPassword: string | undefined;
//     email: string | undefined;

//     constructor(data?: IAddPasswordUserCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.newPassword = _data["newPassword"];
//             this.confirmNewPassword = _data["confirmNewPassword"];
//             this.email = _data["email"];
//         }
//     }

//     static fromJS(data: any): AddPasswordUserCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new AddPasswordUserCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["newPassword"] = this.newPassword;
//         data["confirmNewPassword"] = this.confirmNewPassword;
//         data["email"] = this.email;
//         return data; 
//     }

//     clone(): AddPasswordUserCommand {
//         const json = this.toJSON();
//         let result = new AddPasswordUserCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IAddPasswordUserCommand {
//     newPassword: string | undefined;
//     confirmNewPassword: string | undefined;
//     email: string | undefined;
// }

// export class AuthorizedUserDTO implements IAuthorizedUserDTO {
//     user: TechnicalSupportDto;
//     token: string | undefined;

//     constructor(data?: IAuthorizedUserDTO) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.user = _data["user"] ? TechnicalSupportDto.fromJS(_data["user"]) : <any>undefined;
//             this.token = _data["token"];
//         }
//     }

//     static fromJS(data: any): AuthorizedUserDTO {
//         data = typeof data === 'object' ? data : {};
//         let result = new AuthorizedUserDTO();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["user"] = this.user ? this.user.toJSON() : <any>undefined;
//         data["token"] = this.token;
//         return data; 
//     }

//     clone(): AuthorizedUserDTO {
//         const json = this.toJSON();
//         let result = new AuthorizedUserDTO();
//         result.init(json);
//         return result;
//     }
// }

// export interface IAuthorizedUserDTO {
//     user: TechnicalSupportDto;
//     token: string | undefined;
// }

// export class BusinessDto implements IBusinessDto {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: number;
//     code: string | undefined;
//     isActive: boolean | undefined;

//     constructor(data?: IBusinessDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.id = _data["id"];
//             this.code = _data["code"];
//             this.isActive = _data["isActive"];
//         }
//     }

//     static fromJS(data: any): BusinessDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new BusinessDto();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["id"] = this.id;
//         data["code"] = this.code;
//         data["isActive"] = this.isActive;
//         return data; 
//     }

//     clone(): BusinessDto {
//         const json = this.toJSON();
//         let result = new BusinessDto();
//         result.init(json);
//         return result;
//     }
// }

// export interface IBusinessDto {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: number;
//     code: string | undefined;
//     isActive: boolean | undefined;
// }

// export class BusinessDtoPageList implements IBusinessDtoPageList {
//     metadata: PagedListMetaData;
//     items: BusinessDto[] | undefined;

//     constructor(data?: IBusinessDtoPageList) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.metadata = _data["metadata"] ? PagedListMetaData.fromJS(_data["metadata"]) : <any>undefined;
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items.push(BusinessDto.fromJS(item));
//             }
//         }
//     }

//     static fromJS(data: any): BusinessDtoPageList {
//         data = typeof data === 'object' ? data : {};
//         let result = new BusinessDtoPageList();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["metadata"] = this.metadata ? this.metadata.toJSON() : <any>undefined;
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data; 
//     }

//     clone(): BusinessDtoPageList {
//         const json = this.toJSON();
//         let result = new BusinessDtoPageList();
//         result.init(json);
//         return result;
//     }
// }

// export interface IBusinessDtoPageList {
//     metadata: PagedListMetaData;
//     items: BusinessDto[] | undefined;
// }

// export class ChangePasswordCommand implements IChangePasswordCommand {
//     oldPassword: string | undefined;
//     newPassword: string | undefined;
//     confirmNewPassword: string | undefined;

//     constructor(data?: IChangePasswordCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.oldPassword = _data["oldPassword"];
//             this.newPassword = _data["newPassword"];
//             this.confirmNewPassword = _data["confirmNewPassword"];
//         }
//     }

//     static fromJS(data: any): ChangePasswordCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new ChangePasswordCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["oldPassword"] = this.oldPassword;
//         data["newPassword"] = this.newPassword;
//         data["confirmNewPassword"] = this.confirmNewPassword;
//         return data; 
//     }

//     clone(): ChangePasswordCommand {
//         const json = this.toJSON();
//         let result = new ChangePasswordCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IChangePasswordCommand {
//     oldPassword: string | undefined;
//     newPassword: string | undefined;
//     confirmNewPassword: string | undefined;
// }

// export class CountryDto implements ICountryDto {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: number;
//     code: string | undefined;
//     isActive: boolean | undefined;

//     constructor(data?: ICountryDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.id = _data["id"];
//             this.code = _data["code"];
//             this.isActive = _data["isActive"];
//         }
//     }

//     static fromJS(data: any): CountryDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CountryDto();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["id"] = this.id;
//         data["code"] = this.code;
//         data["isActive"] = this.isActive;
//         return data; 
//     }

//     clone(): CountryDto {
//         const json = this.toJSON();
//         let result = new CountryDto();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICountryDto {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: number;
//     code: string | undefined;
//     isActive: boolean | undefined;
// }

// export class CountryDtoPageList implements ICountryDtoPageList {
//     metadata: PagedListMetaData;
//     items: CountryDto[] | undefined;

//     constructor(data?: ICountryDtoPageList) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.metadata = _data["metadata"] ? PagedListMetaData.fromJS(_data["metadata"]) : <any>undefined;
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items.push(CountryDto.fromJS(item));
//             }
//         }
//     }

//     static fromJS(data: any): CountryDtoPageList {
//         data = typeof data === 'object' ? data : {};
//         let result = new CountryDtoPageList();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["metadata"] = this.metadata ? this.metadata.toJSON() : <any>undefined;
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data; 
//     }

//     clone(): CountryDtoPageList {
//         const json = this.toJSON();
//         let result = new CountryDtoPageList();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICountryDtoPageList {
//     metadata: PagedListMetaData;
//     items: CountryDto[] | undefined;
// }

// export class CreateBusinessCommand implements ICreateBusinessCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     isActive: boolean;

//     constructor(data?: ICreateBusinessCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.code = _data["code"];
//             this.isActive = _data["isActive"];
//         }
//     }

//     static fromJS(data: any): CreateBusinessCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreateBusinessCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["code"] = this.code;
//         data["isActive"] = this.isActive;
//         return data; 
//     }

//     clone(): CreateBusinessCommand {
//         const json = this.toJSON();
//         let result = new CreateBusinessCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICreateBusinessCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     isActive: boolean;
// }

// export class CreateCountryCommand implements ICreateCountryCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     isActive: boolean;

//     constructor(data?: ICreateCountryCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.code = _data["code"];
//             this.isActive = _data["isActive"];
//         }
//     }

//     static fromJS(data: any): CreateCountryCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreateCountryCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["code"] = this.code;
//         data["isActive"] = this.isActive;
//         return data; 
//     }

//     clone(): CreateCountryCommand {
//         const json = this.toJSON();
//         let result = new CreateCountryCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICreateCountryCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     isActive: boolean;
// }

// export class CreateCurrencyCommand implements ICreateCurrencyCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     isActive: boolean;
//     symbol: string | undefined;

//     constructor(data?: ICreateCurrencyCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.code = _data["code"];
//             this.isActive = _data["isActive"];
//             this.symbol = _data["symbol"];
//         }
//     }

//     static fromJS(data: any): CreateCurrencyCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreateCurrencyCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["code"] = this.code;
//         data["isActive"] = this.isActive;
//         data["symbol"] = this.symbol;
//         return data; 
//     }

//     clone(): CreateCurrencyCommand {
//         const json = this.toJSON();
//         let result = new CreateCurrencyCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICreateCurrencyCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     isActive: boolean;
//     symbol: string | undefined;
// }

// export class CreateCustomerCommand implements ICreateCustomerCommand {
//     id: number;
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     phoneNumber: string | undefined;
//     email: string | undefined;
//     isActive: boolean | undefined;
//     countryId: number;
//     businessId: number | undefined;
//     companySize: string | undefined;
//     multiCompanies: boolean | undefined;
//     multiBranches: boolean | undefined;
//     numberOfCompany: number | undefined;
//     numberOfBranch: number | undefined;
//     applications: string | undefined;

//     constructor(data?: ICreateCustomerCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.code = _data["code"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.email = _data["email"];
//             this.isActive = _data["isActive"];
//             this.countryId = _data["countryId"];
//             this.businessId = _data["businessId"];
//             this.companySize = _data["companySize"];
//             this.multiCompanies = _data["multiCompanies"];
//             this.multiBranches = _data["multiBranches"];
//             this.numberOfCompany = _data["numberOfCompany"];
//             this.numberOfBranch = _data["numberOfBranch"];
//             this.applications = _data["applications"];
//         }
//     }

//     static fromJS(data: any): CreateCustomerCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreateCustomerCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["code"] = this.code;
//         data["phoneNumber"] = this.phoneNumber;
//         data["email"] = this.email;
//         data["isActive"] = this.isActive;
//         data["countryId"] = this.countryId;
//         data["businessId"] = this.businessId;
//         data["companySize"] = this.companySize;
//         data["multiCompanies"] = this.multiCompanies;
//         data["multiBranches"] = this.multiBranches;
//         data["numberOfCompany"] = this.numberOfCompany;
//         data["numberOfBranch"] = this.numberOfBranch;
//         data["applications"] = this.applications;
//         return data; 
//     }

//     clone(): CreateCustomerCommand {
//         const json = this.toJSON();
//         let result = new CreateCustomerCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICreateCustomerCommand {
//     id: number;
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     phoneNumber: string | undefined;
//     email: string | undefined;
//     isActive: boolean | undefined;
//     countryId: number;
//     businessId: number | undefined;
//     companySize: string | undefined;
//     multiCompanies: boolean | undefined;
//     multiBranches: boolean | undefined;
//     numberOfCompany: number | undefined;
//     numberOfBranch: number | undefined;
//     applications: string | undefined;
// }

// export class CreatePermissionCommand implements ICreatePermissionCommand {
//     roleId: string | undefined;
//     permissions: CreatePermissionDto[] | undefined;

//     constructor(data?: ICreatePermissionCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.roleId = _data["roleId"];
//             if (Array.isArray(_data["permissions"])) {
//                 this.permissions = [] as any;
//                 for (let item of _data["permissions"])
//                     this.permissions.push(CreatePermissionDto.fromJS(item));
//             }
//         }
//     }

//     static fromJS(data: any): CreatePermissionCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreatePermissionCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["roleId"] = this.roleId;
//         if (Array.isArray(this.permissions)) {
//             data["permissions"] = [];
//             for (let item of this.permissions)
//                 data["permissions"].push(item.toJSON());
//         }
//         return data; 
//     }

//     clone(): CreatePermissionCommand {
//         const json = this.toJSON();
//         let result = new CreatePermissionCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICreatePermissionCommand {
//     roleId: string | undefined;
//     permissions: CreatePermissionDto[] | undefined;
// }

// export class CreatePermissionDto implements ICreatePermissionDto {
//     id: number;
//     name: string | undefined;
//     controllerNameAr: string | undefined;
//     controllerNameEn: string | undefined;
//     actionNameAr: string | undefined;
//     actionNameEn: string | undefined;
//     isChecked: boolean | undefined;

//     constructor(data?: ICreatePermissionDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.name = _data["name"];
//             this.controllerNameAr = _data["controllerNameAr"];
//             this.controllerNameEn = _data["controllerNameEn"];
//             this.actionNameAr = _data["actionNameAr"];
//             this.actionNameEn = _data["actionNameEn"];
//             this.isChecked = _data["isChecked"];
//         }
//     }

//     static fromJS(data: any): CreatePermissionDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreatePermissionDto();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["name"] = this.name;
//         data["controllerNameAr"] = this.controllerNameAr;
//         data["controllerNameEn"] = this.controllerNameEn;
//         data["actionNameAr"] = this.actionNameAr;
//         data["actionNameEn"] = this.actionNameEn;
//         data["isChecked"] = this.isChecked;
//         return data; 
//     }

//     clone(): CreatePermissionDto {
//         const json = this.toJSON();
//         let result = new CreatePermissionDto();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICreatePermissionDto {
//     id: number;
//     name: string | undefined;
//     controllerNameAr: string | undefined;
//     controllerNameEn: string | undefined;
//     actionNameAr: string | undefined;
//     actionNameEn: string | undefined;
//     isChecked: boolean | undefined;
// }

// export class CreateRoleCommand implements ICreateRoleCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     permissions: CreatePermissionDto[] | undefined;

//     constructor(data?: ICreateRoleCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.code = _data["code"];
//             if (Array.isArray(_data["permissions"])) {
//                 this.permissions = [] as any;
//                 for (let item of _data["permissions"])
//                     this.permissions.push(CreatePermissionDto.fromJS(item));
//             }
//         }
//     }

//     static fromJS(data: any): CreateRoleCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreateRoleCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["code"] = this.code;
//         if (Array.isArray(this.permissions)) {
//             data["permissions"] = [];
//             for (let item of this.permissions)
//                 data["permissions"].push(item.toJSON());
//         }
//         return data; 
//     }

//     clone(): CreateRoleCommand {
//         const json = this.toJSON();
//         let result = new CreateRoleCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICreateRoleCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     permissions: CreatePermissionDto[] | undefined;
// }

// export class CreateUserCommand implements ICreateUserCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     phoneNumber: string | undefined;
//     isActive: boolean | undefined;
//     email: string | undefined;
//     code: string | undefined;
//     roles: string[] | undefined;
//     password: string | undefined;
//     fullName: string | undefined;

//     constructor(data?: ICreateUserCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.isActive = _data["isActive"];
//             this.email = _data["email"];
//             this.code = _data["code"];
//             if (Array.isArray(_data["roles"])) {
//                 this.roles = [] as any;
//                 for (let item of _data["roles"])
//                     this.roles.push(item);
//             }
//             this.password = _data["password"];
//             this.fullName = _data["fullName"];
//         }
//     }

//     static fromJS(data: any): CreateUserCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new CreateUserCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["phoneNumber"] = this.phoneNumber;
//         data["isActive"] = this.isActive;
//         data["email"] = this.email;
//         data["code"] = this.code;
//         if (Array.isArray(this.roles)) {
//             data["roles"] = [];
//             for (let item of this.roles)
//                 data["roles"].push(item);
//         }
//         data["password"] = this.password;
//         data["fullName"] = this.fullName;
//         return data; 
//     }

//     clone(): CreateUserCommand {
//         const json = this.toJSON();
//         let result = new CreateUserCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICreateUserCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     phoneNumber: string | undefined;
//     isActive: boolean | undefined;
//     email: string | undefined;
//     code: string | undefined;
//     roles: string[] | undefined;
//     password: string | undefined;
//     fullName: string | undefined;
// }

// export class CurrencyDto implements ICurrencyDto {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: number;
//     code: string | undefined;
//     isActive: boolean | undefined;
//     symbol: string | undefined;

//     constructor(data?: ICurrencyDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.id = _data["id"];
//             this.code = _data["code"];
//             this.isActive = _data["isActive"];
//             this.symbol = _data["symbol"];
//         }
//     }

//     static fromJS(data: any): CurrencyDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CurrencyDto();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["id"] = this.id;
//         data["code"] = this.code;
//         data["isActive"] = this.isActive;
//         data["symbol"] = this.symbol;
//         return data; 
//     }

//     clone(): CurrencyDto {
//         const json = this.toJSON();
//         let result = new CurrencyDto();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICurrencyDto {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: number;
//     code: string | undefined;
//     isActive: boolean | undefined;
//     symbol: string | undefined;
// }

// export class CurrencyDtoPageList implements ICurrencyDtoPageList {
//     metadata: PagedListMetaData;
//     items: CurrencyDto[] | undefined;

//     constructor(data?: ICurrencyDtoPageList) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.metadata = _data["metadata"] ? PagedListMetaData.fromJS(_data["metadata"]) : <any>undefined;
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items.push(CurrencyDto.fromJS(item));
//             }
//         }
//     }

//     static fromJS(data: any): CurrencyDtoPageList {
//         data = typeof data === 'object' ? data : {};
//         let result = new CurrencyDtoPageList();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["metadata"] = this.metadata ? this.metadata.toJSON() : <any>undefined;
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data; 
//     }

//     clone(): CurrencyDtoPageList {
//         const json = this.toJSON();
//         let result = new CurrencyDtoPageList();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICurrencyDtoPageList {
//     metadata: PagedListMetaData;
//     items: CurrencyDto[] | undefined;
// }

// export class CustomerDto implements ICustomerDto {
//     id: number;
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     phoneNumber: string | undefined;
//     email: string | undefined;
//     isActive: boolean | undefined;
//     countryId: number;
//     businessId: number | undefined;
//     companySize: string | undefined;
//     multiCompanies: boolean | undefined;
//     multiBranches: boolean | undefined;
//     numberOfCompany: number | undefined;
//     numberOfBranch: number | undefined;
//     applications: string | undefined;
//     subscriptionDto: CustomerSubscriptionDto[] | undefined;

//     constructor(data?: ICustomerDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.code = _data["code"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.email = _data["email"];
//             this.isActive = _data["isActive"];
//             this.countryId = _data["countryId"];
//             this.businessId = _data["businessId"];
//             this.companySize = _data["companySize"];
//             this.multiCompanies = _data["multiCompanies"];
//             this.multiBranches = _data["multiBranches"];
//             this.numberOfCompany = _data["numberOfCompany"];
//             this.numberOfBranch = _data["numberOfBranch"];
//             this.applications = _data["applications"];
//             if (Array.isArray(_data["subscriptionDto"])) {
//                 this.subscriptionDto = [] as any;
//                 for (let item of _data["subscriptionDto"])
//                     this.subscriptionDto.push(CustomerSubscriptionDto.fromJS(item));
//             }
//         }
//     }

//     static fromJS(data: any): CustomerDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CustomerDto();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["code"] = this.code;
//         data["phoneNumber"] = this.phoneNumber;
//         data["email"] = this.email;
//         data["isActive"] = this.isActive;
//         data["countryId"] = this.countryId;
//         data["businessId"] = this.businessId;
//         data["companySize"] = this.companySize;
//         data["multiCompanies"] = this.multiCompanies;
//         data["multiBranches"] = this.multiBranches;
//         data["numberOfCompany"] = this.numberOfCompany;
//         data["numberOfBranch"] = this.numberOfBranch;
//         data["applications"] = this.applications;
//         if (Array.isArray(this.subscriptionDto)) {
//             data["subscriptionDto"] = [];
//             for (let item of this.subscriptionDto)
//                 data["subscriptionDto"].push(item.toJSON());
//         }
//         return data; 
//     }

//     clone(): CustomerDto {
//         const json = this.toJSON();
//         let result = new CustomerDto();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICustomerDto {
//     id: number;
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     phoneNumber: string | undefined;
//     email: string | undefined;
//     isActive: boolean | undefined;
//     countryId: number;
//     businessId: number | undefined;
//     companySize: string | undefined;
//     multiCompanies: boolean | undefined;
//     multiBranches: boolean | undefined;
//     numberOfCompany: number | undefined;
//     numberOfBranch: number | undefined;
//     applications: string | undefined;
//     subscriptionDto: CustomerSubscriptionDto[] | undefined;
// }

// export class CustomerDtoPageList implements ICustomerDtoPageList {
//     metadata: PagedListMetaData;
//     items: CustomerDto[] | undefined;

//     constructor(data?: ICustomerDtoPageList) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.metadata = _data["metadata"] ? PagedListMetaData.fromJS(_data["metadata"]) : <any>undefined;
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items.push(CustomerDto.fromJS(item));
//             }
//         }
//     }

//     static fromJS(data: any): CustomerDtoPageList {
//         data = typeof data === 'object' ? data : {};
//         let result = new CustomerDtoPageList();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["metadata"] = this.metadata ? this.metadata.toJSON() : <any>undefined;
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data; 
//     }

//     clone(): CustomerDtoPageList {
//         const json = this.toJSON();
//         let result = new CustomerDtoPageList();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICustomerDtoPageList {
//     metadata: PagedListMetaData;
//     items: CustomerDto[] | undefined;
// }

// export class CustomerSubscriptionDto implements ICustomerSubscriptionDto {
//     customerId: number;
//     serverNameAr: string | undefined;
//     serverNameEn: string | undefined;
//     databaseNameAr: string | undefined;
//     databaseNameEn: string | undefined;
//     subDomain: string | undefined;
//     contractStartDate: moment.Moment | undefined;
//     contractEndDate: moment.Moment | undefined;
//     applications: string | undefined;

//     constructor(data?: ICustomerSubscriptionDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.customerId = _data["customerId"];
//             this.serverNameAr = _data["serverNameAr"];
//             this.serverNameEn = _data["serverNameEn"];
//             this.databaseNameAr = _data["databaseNameAr"];
//             this.databaseNameEn = _data["databaseNameEn"];
//             this.subDomain = _data["subDomain"];
//             this.contractStartDate = _data["contractStartDate"] ? moment(_data["contractStartDate"].toString()) : <any>undefined;
//             this.contractEndDate = _data["contractEndDate"] ? moment(_data["contractEndDate"].toString()) : <any>undefined;
//             this.applications = _data["applications"];
//         }
//     }

//     static fromJS(data: any): CustomerSubscriptionDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new CustomerSubscriptionDto();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["customerId"] = this.customerId;
//         data["serverNameAr"] = this.serverNameAr;
//         data["serverNameEn"] = this.serverNameEn;
//         data["databaseNameAr"] = this.databaseNameAr;
//         data["databaseNameEn"] = this.databaseNameEn;
//         data["subDomain"] = this.subDomain;
//         data["contractStartDate"] = this.contractStartDate ? this.contractStartDate.toISOString() : <any>undefined;
//         data["contractEndDate"] = this.contractEndDate ? this.contractEndDate.toISOString() : <any>undefined;
//         data["applications"] = this.applications;
//         return data; 
//     }

//     clone(): CustomerSubscriptionDto {
//         const json = this.toJSON();
//         let result = new CustomerSubscriptionDto();
//         result.init(json);
//         return result;
//     }
// }

// export interface ICustomerSubscriptionDto {
//     customerId: number;
//     serverNameAr: string | undefined;
//     serverNameEn: string | undefined;
//     databaseNameAr: string | undefined;
//     databaseNameEn: string | undefined;
//     subDomain: string | undefined;
//     contractStartDate: moment.Moment | undefined;
//     contractEndDate: moment.Moment | undefined;
//     applications: string | undefined;
// }

// export class DeleteListBusinessCommand implements IDeleteListBusinessCommand {
//     ids: number[] | undefined;

//     constructor(data?: IDeleteListBusinessCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["ids"])) {
//                 this.ids = [] as any;
//                 for (let item of _data["ids"])
//                     this.ids.push(item);
//             }
//         }
//     }

//     static fromJS(data: any): DeleteListBusinessCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new DeleteListBusinessCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.ids)) {
//             data["ids"] = [];
//             for (let item of this.ids)
//                 data["ids"].push(item);
//         }
//         return data; 
//     }

//     clone(): DeleteListBusinessCommand {
//         const json = this.toJSON();
//         let result = new DeleteListBusinessCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IDeleteListBusinessCommand {
//     ids: number[] | undefined;
// }

// export class DeleteListCountryCommand implements IDeleteListCountryCommand {
//     ids: number[] | undefined;

//     constructor(data?: IDeleteListCountryCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["ids"])) {
//                 this.ids = [] as any;
//                 for (let item of _data["ids"])
//                     this.ids.push(item);
//             }
//         }
//     }

//     static fromJS(data: any): DeleteListCountryCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new DeleteListCountryCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.ids)) {
//             data["ids"] = [];
//             for (let item of this.ids)
//                 data["ids"].push(item);
//         }
//         return data; 
//     }

//     clone(): DeleteListCountryCommand {
//         const json = this.toJSON();
//         let result = new DeleteListCountryCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IDeleteListCountryCommand {
//     ids: number[] | undefined;
// }

// export class DeleteListCurrencyCommand implements IDeleteListCurrencyCommand {
//     ids: number[] | undefined;

//     constructor(data?: IDeleteListCurrencyCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["ids"])) {
//                 this.ids = [] as any;
//                 for (let item of _data["ids"])
//                     this.ids.push(item);
//             }
//         }
//     }

//     static fromJS(data: any): DeleteListCurrencyCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new DeleteListCurrencyCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.ids)) {
//             data["ids"] = [];
//             for (let item of this.ids)
//                 data["ids"].push(item);
//         }
//         return data; 
//     }

//     clone(): DeleteListCurrencyCommand {
//         const json = this.toJSON();
//         let result = new DeleteListCurrencyCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IDeleteListCurrencyCommand {
//     ids: number[] | undefined;
// }

// export class DeleteListCustomerCommand implements IDeleteListCustomerCommand {
//     ids: number[] | undefined;

//     constructor(data?: IDeleteListCustomerCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["ids"])) {
//                 this.ids = [] as any;
//                 for (let item of _data["ids"])
//                     this.ids.push(item);
//             }
//         }
//     }

//     static fromJS(data: any): DeleteListCustomerCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new DeleteListCustomerCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.ids)) {
//             data["ids"] = [];
//             for (let item of this.ids)
//                 data["ids"].push(item);
//         }
//         return data; 
//     }

//     clone(): DeleteListCustomerCommand {
//         const json = this.toJSON();
//         let result = new DeleteListCustomerCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IDeleteListCustomerCommand {
//     ids: number[] | undefined;
// }

// export class DeleteListRoleCommand implements IDeleteListRoleCommand {
//     ids: string[] | undefined;

//     constructor(data?: IDeleteListRoleCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["ids"])) {
//                 this.ids = [] as any;
//                 for (let item of _data["ids"])
//                     this.ids.push(item);
//             }
//         }
//     }

//     static fromJS(data: any): DeleteListRoleCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new DeleteListRoleCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.ids)) {
//             data["ids"] = [];
//             for (let item of this.ids)
//                 data["ids"].push(item);
//         }
//         return data; 
//     }

//     clone(): DeleteListRoleCommand {
//         const json = this.toJSON();
//         let result = new DeleteListRoleCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IDeleteListRoleCommand {
//     ids: string[] | undefined;
// }

// export class DeleteListUserCommand implements IDeleteListUserCommand {
//     ids: string[] | undefined;

//     constructor(data?: IDeleteListUserCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["ids"])) {
//                 this.ids = [] as any;
//                 for (let item of _data["ids"])
//                     this.ids.push(item);
//             }
//         }
//     }

//     static fromJS(data: any): DeleteListUserCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new DeleteListUserCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.ids)) {
//             data["ids"] = [];
//             for (let item of this.ids)
//                 data["ids"].push(item);
//         }
//         return data; 
//     }

//     clone(): DeleteListUserCommand {
//         const json = this.toJSON();
//         let result = new DeleteListUserCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IDeleteListUserCommand {
//     ids: string[] | undefined;
// }

// export class EditBusinessCommand implements IEditBusinessCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: number;
//     code: string | undefined;
//     isActive: boolean;

//     constructor(data?: IEditBusinessCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.id = _data["id"];
//             this.code = _data["code"];
//             this.isActive = _data["isActive"];
//         }
//     }

//     static fromJS(data: any): EditBusinessCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new EditBusinessCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["id"] = this.id;
//         data["code"] = this.code;
//         data["isActive"] = this.isActive;
//         return data; 
//     }

//     clone(): EditBusinessCommand {
//         const json = this.toJSON();
//         let result = new EditBusinessCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IEditBusinessCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: number;
//     code: string | undefined;
//     isActive: boolean;
// }

// export class EditCountryCommand implements IEditCountryCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: number;
//     code: string | undefined;
//     isActive: boolean | undefined;

//     constructor(data?: IEditCountryCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.id = _data["id"];
//             this.code = _data["code"];
//             this.isActive = _data["isActive"];
//         }
//     }

//     static fromJS(data: any): EditCountryCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new EditCountryCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["id"] = this.id;
//         data["code"] = this.code;
//         data["isActive"] = this.isActive;
//         return data; 
//     }

//     clone(): EditCountryCommand {
//         const json = this.toJSON();
//         let result = new EditCountryCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IEditCountryCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: number;
//     code: string | undefined;
//     isActive: boolean | undefined;
// }

// export class EditCurrencyCommand implements IEditCurrencyCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: number;
//     code: string | undefined;
//     isActive: boolean | undefined;
//     symbol: string | undefined;

//     constructor(data?: IEditCurrencyCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.id = _data["id"];
//             this.code = _data["code"];
//             this.isActive = _data["isActive"];
//             this.symbol = _data["symbol"];
//         }
//     }

//     static fromJS(data: any): EditCurrencyCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new EditCurrencyCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["id"] = this.id;
//         data["code"] = this.code;
//         data["isActive"] = this.isActive;
//         data["symbol"] = this.symbol;
//         return data; 
//     }

//     clone(): EditCurrencyCommand {
//         const json = this.toJSON();
//         let result = new EditCurrencyCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IEditCurrencyCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: number;
//     code: string | undefined;
//     isActive: boolean | undefined;
//     symbol: string | undefined;
// }

// export class EditCustomerCommand implements IEditCustomerCommand {
//     id: number;
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     phoneNumber: string | undefined;
//     email: string | undefined;
//     isActive: boolean | undefined;
//     countryId: number;
//     businessId: number | undefined;
//     companySize: string | undefined;
//     multiCompanies: boolean | undefined;
//     multiBranches: boolean | undefined;
//     numberOfCompany: number | undefined;
//     numberOfBranch: number | undefined;
//     applications: string | undefined;

//     constructor(data?: IEditCustomerCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.code = _data["code"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.email = _data["email"];
//             this.isActive = _data["isActive"];
//             this.countryId = _data["countryId"];
//             this.businessId = _data["businessId"];
//             this.companySize = _data["companySize"];
//             this.multiCompanies = _data["multiCompanies"];
//             this.multiBranches = _data["multiBranches"];
//             this.numberOfCompany = _data["numberOfCompany"];
//             this.numberOfBranch = _data["numberOfBranch"];
//             this.applications = _data["applications"];
//         }
//     }

//     static fromJS(data: any): EditCustomerCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new EditCustomerCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["code"] = this.code;
//         data["phoneNumber"] = this.phoneNumber;
//         data["email"] = this.email;
//         data["isActive"] = this.isActive;
//         data["countryId"] = this.countryId;
//         data["businessId"] = this.businessId;
//         data["companySize"] = this.companySize;
//         data["multiCompanies"] = this.multiCompanies;
//         data["multiBranches"] = this.multiBranches;
//         data["numberOfCompany"] = this.numberOfCompany;
//         data["numberOfBranch"] = this.numberOfBranch;
//         data["applications"] = this.applications;
//         return data; 
//     }

//     clone(): EditCustomerCommand {
//         const json = this.toJSON();
//         let result = new EditCustomerCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IEditCustomerCommand {
//     id: number;
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     phoneNumber: string | undefined;
//     email: string | undefined;
//     isActive: boolean | undefined;
//     countryId: number;
//     businessId: number | undefined;
//     companySize: string | undefined;
//     multiCompanies: boolean | undefined;
//     multiBranches: boolean | undefined;
//     numberOfCompany: number | undefined;
//     numberOfBranch: number | undefined;
//     applications: string | undefined;
// }

// export class EditRoleCommand implements IEditRoleCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: string | undefined;
//     code: string | undefined;
//     permissions: CreatePermissionDto[] | undefined;

//     constructor(data?: IEditRoleCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.id = _data["id"];
//             this.code = _data["code"];
//             if (Array.isArray(_data["permissions"])) {
//                 this.permissions = [] as any;
//                 for (let item of _data["permissions"])
//                     this.permissions.push(CreatePermissionDto.fromJS(item));
//             }
//         }
//     }

//     static fromJS(data: any): EditRoleCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new EditRoleCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["id"] = this.id;
//         data["code"] = this.code;
//         if (Array.isArray(this.permissions)) {
//             data["permissions"] = [];
//             for (let item of this.permissions)
//                 data["permissions"].push(item.toJSON());
//         }
//         return data; 
//     }

//     clone(): EditRoleCommand {
//         const json = this.toJSON();
//         let result = new EditRoleCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IEditRoleCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: string | undefined;
//     code: string | undefined;
//     permissions: CreatePermissionDto[] | undefined;
// }

// export class EditUserCommand implements IEditUserCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     phoneNumber: string | undefined;
//     isActive: boolean | undefined;
//     email: string | undefined;
//     id: string | undefined;
//     roles: string[] | undefined;
//     password: string | undefined;
//     code: string | undefined;
//     fullName: string | undefined;

//     constructor(data?: IEditUserCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.isActive = _data["isActive"];
//             this.email = _data["email"];
//             this.id = _data["id"];
//             if (Array.isArray(_data["roles"])) {
//                 this.roles = [] as any;
//                 for (let item of _data["roles"])
//                     this.roles.push(item);
//             }
//             this.password = _data["password"];
//             this.code = _data["code"];
//             this.fullName = _data["fullName"];
//         }
//     }

//     static fromJS(data: any): EditUserCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new EditUserCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["phoneNumber"] = this.phoneNumber;
//         data["isActive"] = this.isActive;
//         data["email"] = this.email;
//         data["id"] = this.id;
//         if (Array.isArray(this.roles)) {
//             data["roles"] = [];
//             for (let item of this.roles)
//                 data["roles"].push(item);
//         }
//         data["password"] = this.password;
//         data["code"] = this.code;
//         data["fullName"] = this.fullName;
//         return data; 
//     }

//     clone(): EditUserCommand {
//         const json = this.toJSON();
//         let result = new EditUserCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IEditUserCommand {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     phoneNumber: string | undefined;
//     isActive: boolean | undefined;
//     email: string | undefined;
//     id: string | undefined;
//     roles: string[] | undefined;
//     password: string | undefined;
//     code: string | undefined;
//     fullName: string | undefined;
// }

// export class GetAllBusinesssQuery implements IGetAllBusinesssQuery {

//     constructor(data?: IGetAllBusinesssQuery) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//     }

//     static fromJS(data: any): GetAllBusinesssQuery {
//         data = typeof data === 'object' ? data : {};
//         let result = new GetAllBusinesssQuery();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         return data; 
//     }

//     clone(): GetAllBusinesssQuery {
//         const json = this.toJSON();
//         let result = new GetAllBusinesssQuery();
//         result.init(json);
//         return result;
//     }
// }

// export interface IGetAllBusinesssQuery {
// }

// export class GetAllCountriesQuery implements IGetAllCountriesQuery {

//     constructor(data?: IGetAllCountriesQuery) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//     }

//     static fromJS(data: any): GetAllCountriesQuery {
//         data = typeof data === 'object' ? data : {};
//         let result = new GetAllCountriesQuery();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         return data; 
//     }

//     clone(): GetAllCountriesQuery {
//         const json = this.toJSON();
//         let result = new GetAllCountriesQuery();
//         result.init(json);
//         return result;
//     }
// }

// export interface IGetAllCountriesQuery {
// }

// export class GetAllCurrenciesQuery implements IGetAllCurrenciesQuery {

//     constructor(data?: IGetAllCurrenciesQuery) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//     }

//     static fromJS(data: any): GetAllCurrenciesQuery {
//         data = typeof data === 'object' ? data : {};
//         let result = new GetAllCurrenciesQuery();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         return data; 
//     }

//     clone(): GetAllCurrenciesQuery {
//         const json = this.toJSON();
//         let result = new GetAllCurrenciesQuery();
//         result.init(json);
//         return result;
//     }
// }

// export interface IGetAllCurrenciesQuery {
// }

// export class GetAllCustomersQuery implements IGetAllCustomersQuery {

//     constructor(data?: IGetAllCustomersQuery) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//     }

//     static fromJS(data: any): GetAllCustomersQuery {
//         data = typeof data === 'object' ? data : {};
//         let result = new GetAllCustomersQuery();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         return data; 
//     }

//     clone(): GetAllCustomersQuery {
//         const json = this.toJSON();
//         let result = new GetAllCustomersQuery();
//         result.init(json);
//         return result;
//     }
// }

// export interface IGetAllCustomersQuery {
// }

// export class GetAllPermissionDTO implements IGetAllPermissionDTO {
//     id: number;
//     name: string | undefined;
//     controllerNameAr: string | undefined;
//     controllerNameEn: string | undefined;
//     actionNameAr: string | undefined;
//     actionNameEn: string | undefined;
//     isChecked: boolean | undefined;
//     roleId: string | undefined;

//     constructor(data?: IGetAllPermissionDTO) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.name = _data["name"];
//             this.controllerNameAr = _data["controllerNameAr"];
//             this.controllerNameEn = _data["controllerNameEn"];
//             this.actionNameAr = _data["actionNameAr"];
//             this.actionNameEn = _data["actionNameEn"];
//             this.isChecked = _data["isChecked"];
//             this.roleId = _data["roleId"];
//         }
//     }

//     static fromJS(data: any): GetAllPermissionDTO {
//         data = typeof data === 'object' ? data : {};
//         let result = new GetAllPermissionDTO();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["name"] = this.name;
//         data["controllerNameAr"] = this.controllerNameAr;
//         data["controllerNameEn"] = this.controllerNameEn;
//         data["actionNameAr"] = this.actionNameAr;
//         data["actionNameEn"] = this.actionNameEn;
//         data["isChecked"] = this.isChecked;
//         data["roleId"] = this.roleId;
//         return data; 
//     }

//     clone(): GetAllPermissionDTO {
//         const json = this.toJSON();
//         let result = new GetAllPermissionDTO();
//         result.init(json);
//         return result;
//     }
// }

// export interface IGetAllPermissionDTO {
//     id: number;
//     name: string | undefined;
//     controllerNameAr: string | undefined;
//     controllerNameEn: string | undefined;
//     actionNameAr: string | undefined;
//     actionNameEn: string | undefined;
//     isChecked: boolean | undefined;
//     roleId: string | undefined;
// }

// export class GetAllPermissionDTOPageList implements IGetAllPermissionDTOPageList {
//     metadata: PagedListMetaData;
//     items: GetAllPermissionDTO[] | undefined;

//     constructor(data?: IGetAllPermissionDTOPageList) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.metadata = _data["metadata"] ? PagedListMetaData.fromJS(_data["metadata"]) : <any>undefined;
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items.push(GetAllPermissionDTO.fromJS(item));
//             }
//         }
//     }

//     static fromJS(data: any): GetAllPermissionDTOPageList {
//         data = typeof data === 'object' ? data : {};
//         let result = new GetAllPermissionDTOPageList();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["metadata"] = this.metadata ? this.metadata.toJSON() : <any>undefined;
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data; 
//     }

//     clone(): GetAllPermissionDTOPageList {
//         const json = this.toJSON();
//         let result = new GetAllPermissionDTOPageList();
//         result.init(json);
//         return result;
//     }
// }

// export interface IGetAllPermissionDTOPageList {
//     metadata: PagedListMetaData;
//     items: GetAllPermissionDTO[] | undefined;
// }

// export class GetAllPermissionDTOPaginatedList implements IGetAllPermissionDTOPaginatedList {
//     pageIndex: number;
//     readonly totalPages: number;
//     readonly totalCount: number;
//     readonly hasPreviousPage: boolean;
//     readonly hasNextPage: boolean;
//     items: GetAllPermissionDTO[] | undefined;

//     constructor(data?: IGetAllPermissionDTOPaginatedList) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.pageIndex = _data["pageIndex"];
//             (<any>this).totalPages = _data["totalPages"];
//             (<any>this).totalCount = _data["totalCount"];
//             (<any>this).hasPreviousPage = _data["hasPreviousPage"];
//             (<any>this).hasNextPage = _data["hasNextPage"];
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items.push(GetAllPermissionDTO.fromJS(item));
//             }
//         }
//     }

//     static fromJS(data: any): GetAllPermissionDTOPaginatedList {
//         data = typeof data === 'object' ? data : {};
//         let result = new GetAllPermissionDTOPaginatedList();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["pageIndex"] = this.pageIndex;
//         data["totalPages"] = this.totalPages;
//         data["totalCount"] = this.totalCount;
//         data["hasPreviousPage"] = this.hasPreviousPage;
//         data["hasNextPage"] = this.hasNextPage;
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data; 
//     }

//     clone(): GetAllPermissionDTOPaginatedList {
//         const json = this.toJSON();
//         let result = new GetAllPermissionDTOPaginatedList();
//         result.init(json);
//         return result;
//     }
// }

// export interface IGetAllPermissionDTOPaginatedList {
//     pageIndex: number;
//     totalPages: number;
//     totalCount: number;
//     hasPreviousPage: boolean;
//     hasNextPage: boolean;
//     items: GetAllPermissionDTO[] | undefined;
// }

// export class GetAllRolesQuery implements IGetAllRolesQuery {

//     constructor(data?: IGetAllRolesQuery) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//     }

//     static fromJS(data: any): GetAllRolesQuery {
//         data = typeof data === 'object' ? data : {};
//         let result = new GetAllRolesQuery();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         return data; 
//     }

//     clone(): GetAllRolesQuery {
//         const json = this.toJSON();
//         let result = new GetAllRolesQuery();
//         result.init(json);
//         return result;
//     }
// }

// export interface IGetAllRolesQuery {
// }

// export class GetAllUserQuery implements IGetAllUserQuery {

//     constructor(data?: IGetAllUserQuery) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//     }

//     static fromJS(data: any): GetAllUserQuery {
//         data = typeof data === 'object' ? data : {};
//         let result = new GetAllUserQuery();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         return data; 
//     }

//     clone(): GetAllUserQuery {
//         const json = this.toJSON();
//         let result = new GetAllUserQuery();
//         result.init(json);
//         return result;
//     }
// }

// export interface IGetAllUserQuery {
// }

// export class LoginCommand implements ILoginCommand {
//     userName: string | undefined;
//     passWord: string | undefined;

//     constructor(data?: ILoginCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.userName = _data["userName"];
//             this.passWord = _data["passWord"];
//         }
//     }

//     static fromJS(data: any): LoginCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new LoginCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userName"] = this.userName;
//         data["passWord"] = this.passWord;
//         return data; 
//     }

//     clone(): LoginCommand {
//         const json = this.toJSON();
//         let result = new LoginCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface ILoginCommand {
//     userName: string | undefined;
//     passWord: string | undefined;
// }

// export class PagedListMetaData implements IPagedListMetaData {
//     readonly pageCount: number;
//     readonly totalItemCount: number;
//     readonly pageNumber: number;
//     readonly pageSize: number;
//     readonly hasPreviousPage: boolean;
//     readonly hasNextPage: boolean;
//     readonly isFirstPage: boolean;
//     readonly isLastPage: boolean;
//     readonly firstItemOnPage: number;
//     readonly lastItemOnPage: number;

//     constructor(data?: IPagedListMetaData) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             (<any>this).pageCount = _data["pageCount"];
//             (<any>this).totalItemCount = _data["totalItemCount"];
//             (<any>this).pageNumber = _data["pageNumber"];
//             (<any>this).pageSize = _data["pageSize"];
//             (<any>this).hasPreviousPage = _data["hasPreviousPage"];
//             (<any>this).hasNextPage = _data["hasNextPage"];
//             (<any>this).isFirstPage = _data["isFirstPage"];
//             (<any>this).isLastPage = _data["isLastPage"];
//             (<any>this).firstItemOnPage = _data["firstItemOnPage"];
//             (<any>this).lastItemOnPage = _data["lastItemOnPage"];
//         }
//     }

//     static fromJS(data: any): PagedListMetaData {
//         data = typeof data === 'object' ? data : {};
//         let result = new PagedListMetaData();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["pageCount"] = this.pageCount;
//         data["totalItemCount"] = this.totalItemCount;
//         data["pageNumber"] = this.pageNumber;
//         data["pageSize"] = this.pageSize;
//         data["hasPreviousPage"] = this.hasPreviousPage;
//         data["hasNextPage"] = this.hasNextPage;
//         data["isFirstPage"] = this.isFirstPage;
//         data["isLastPage"] = this.isLastPage;
//         data["firstItemOnPage"] = this.firstItemOnPage;
//         data["lastItemOnPage"] = this.lastItemOnPage;
//         return data; 
//     }

//     clone(): PagedListMetaData {
//         const json = this.toJSON();
//         let result = new PagedListMetaData();
//         result.init(json);
//         return result;
//     }
// }

// export interface IPagedListMetaData {
//     pageCount: number;
//     totalItemCount: number;
//     pageNumber: number;
//     pageSize: number;
//     hasPreviousPage: boolean;
//     hasNextPage: boolean;
//     isFirstPage: boolean;
//     isLastPage: boolean;
//     firstItemOnPage: number;
//     lastItemOnPage: number;
// }

// export class PermissionDtoCodeRole implements IPermissionDtoCodeRole {
//     permissions: CreatePermissionDto[] | undefined;
//     code: string | undefined;

//     constructor(data?: IPermissionDtoCodeRole) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             if (Array.isArray(_data["permissions"])) {
//                 this.permissions = [] as any;
//                 for (let item of _data["permissions"])
//                     this.permissions.push(CreatePermissionDto.fromJS(item));
//             }
//             this.code = _data["code"];
//         }
//     }

//     static fromJS(data: any): PermissionDtoCodeRole {
//         data = typeof data === 'object' ? data : {};
//         let result = new PermissionDtoCodeRole();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         if (Array.isArray(this.permissions)) {
//             data["permissions"] = [];
//             for (let item of this.permissions)
//                 data["permissions"].push(item.toJSON());
//         }
//         data["code"] = this.code;
//         return data; 
//     }

//     clone(): PermissionDtoCodeRole {
//         const json = this.toJSON();
//         let result = new PermissionDtoCodeRole();
//         result.init(json);
//         return result;
//     }
// }

// export interface IPermissionDtoCodeRole {
//     permissions: CreatePermissionDto[] | undefined;
//     code: string | undefined;
// }

// export class RoleDto implements IRoleDto {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: string | undefined;
//     code: string | undefined;
//     isActive: boolean | undefined;
//     permissions: GetAllPermissionDTOPaginatedList;

//     constructor(data?: IRoleDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.id = _data["id"];
//             this.code = _data["code"];
//             this.isActive = _data["isActive"];
//             this.permissions = _data["permissions"] ? GetAllPermissionDTOPaginatedList.fromJS(_data["permissions"]) : <any>undefined;
//         }
//     }

//     static fromJS(data: any): RoleDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new RoleDto();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["id"] = this.id;
//         data["code"] = this.code;
//         data["isActive"] = this.isActive;
//         data["permissions"] = this.permissions ? this.permissions.toJSON() : <any>undefined;
//         return data; 
//     }

//     clone(): RoleDto {
//         const json = this.toJSON();
//         let result = new RoleDto();
//         result.init(json);
//         return result;
//     }
// }

// export interface IRoleDto {
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     id: string | undefined;
//     code: string | undefined;
//     isActive: boolean | undefined;
//     permissions: GetAllPermissionDTOPaginatedList;
// }

// export class RoleDtoPageList implements IRoleDtoPageList {
//     metadata: PagedListMetaData;
//     items: RoleDto[] | undefined;

//     constructor(data?: IRoleDtoPageList) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.metadata = _data["metadata"] ? PagedListMetaData.fromJS(_data["metadata"]) : <any>undefined;
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items.push(RoleDto.fromJS(item));
//             }
//         }
//     }

//     static fromJS(data: any): RoleDtoPageList {
//         data = typeof data === 'object' ? data : {};
//         let result = new RoleDtoPageList();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["metadata"] = this.metadata ? this.metadata.toJSON() : <any>undefined;
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data; 
//     }

//     clone(): RoleDtoPageList {
//         const json = this.toJSON();
//         let result = new RoleDtoPageList();
//         result.init(json);
//         return result;
//     }
// }

// export interface IRoleDtoPageList {
//     metadata: PagedListMetaData;
//     items: RoleDto[] | undefined;
// }

// export class TechnicalSupportCommand implements ITechnicalSupportCommand {
//     userName: string | undefined;
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     userType: UserType;
//     phoneNumber: string | undefined;
//     email: string | undefined;
//     password: string | undefined;

//     constructor(data?: ITechnicalSupportCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.userName = _data["userName"];
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.userType = _data["userType"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.email = _data["email"];
//             this.password = _data["password"];
//         }
//     }

//     static fromJS(data: any): TechnicalSupportCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new TechnicalSupportCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userName"] = this.userName;
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["userType"] = this.userType;
//         data["phoneNumber"] = this.phoneNumber;
//         data["email"] = this.email;
//         data["password"] = this.password;
//         return data; 
//     }

//     clone(): TechnicalSupportCommand {
//         const json = this.toJSON();
//         let result = new TechnicalSupportCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface ITechnicalSupportCommand {
//     userName: string | undefined;
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     userType: UserType;
//     phoneNumber: string | undefined;
//     email: string | undefined;
//     password: string | undefined;
// }

// export class TechnicalSupportDto implements ITechnicalSupportDto {
//     userName: string | undefined;
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     userType: string | undefined;
//     phoneNumber: string | undefined;
//     email: string | undefined;

//     constructor(data?: ITechnicalSupportDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.userName = _data["userName"];
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.userType = _data["userType"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.email = _data["email"];
//         }
//     }

//     static fromJS(data: any): TechnicalSupportDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new TechnicalSupportDto();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["userName"] = this.userName;
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["userType"] = this.userType;
//         data["phoneNumber"] = this.phoneNumber;
//         data["email"] = this.email;
//         return data; 
//     }

//     clone(): TechnicalSupportDto {
//         const json = this.toJSON();
//         let result = new TechnicalSupportDto();
//         result.init(json);
//         return result;
//     }
// }

// export interface ITechnicalSupportDto {
//     userName: string | undefined;
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     userType: string | undefined;
//     phoneNumber: string | undefined;
//     email: string | undefined;
// }

// export class UserDto implements IUserDto {
//     id: string | undefined;
//     userName: string | undefined;
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     userType: string | undefined;
//     phoneNumber: string | undefined;
//     email: string | undefined;
//     passWord: string | undefined;
//     roles: string[] | undefined;
//     isActive: boolean | undefined;
//     fullName: string | undefined;

//     constructor(data?: IUserDto) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.id = _data["id"];
//             this.userName = _data["userName"];
//             this.nameAr = _data["nameAr"];
//             this.nameEn = _data["nameEn"];
//             this.code = _data["code"];
//             this.userType = _data["userType"];
//             this.phoneNumber = _data["phoneNumber"];
//             this.email = _data["email"];
//             this.passWord = _data["passWord"];
//             if (Array.isArray(_data["roles"])) {
//                 this.roles = [] as any;
//                 for (let item of _data["roles"])
//                     this.roles.push(item);
//             }
//             this.isActive = _data["isActive"];
//             this.fullName = _data["fullName"];
//         }
//     }

//     static fromJS(data: any): UserDto {
//         data = typeof data === 'object' ? data : {};
//         let result = new UserDto();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["id"] = this.id;
//         data["userName"] = this.userName;
//         data["nameAr"] = this.nameAr;
//         data["nameEn"] = this.nameEn;
//         data["code"] = this.code;
//         data["userType"] = this.userType;
//         data["phoneNumber"] = this.phoneNumber;
//         data["email"] = this.email;
//         data["passWord"] = this.passWord;
//         if (Array.isArray(this.roles)) {
//             data["roles"] = [];
//             for (let item of this.roles)
//                 data["roles"].push(item);
//         }
//         data["isActive"] = this.isActive;
//         data["fullName"] = this.fullName;
//         return data; 
//     }

//     clone(): UserDto {
//         const json = this.toJSON();
//         let result = new UserDto();
//         result.init(json);
//         return result;
//     }
// }

// export interface IUserDto {
//     id: string | undefined;
//     userName: string | undefined;
//     nameAr: string | undefined;
//     nameEn: string | undefined;
//     code: string | undefined;
//     userType: string | undefined;
//     phoneNumber: string | undefined;
//     email: string | undefined;
//     passWord: string | undefined;
//     roles: string[] | undefined;
//     isActive: boolean | undefined;
//     fullName: string | undefined;
// }

// export class UserDtoPageList implements IUserDtoPageList {
//     metadata: PagedListMetaData;
//     items: UserDto[] | undefined;

//     constructor(data?: IUserDtoPageList) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.metadata = _data["metadata"] ? PagedListMetaData.fromJS(_data["metadata"]) : <any>undefined;
//             if (Array.isArray(_data["items"])) {
//                 this.items = [] as any;
//                 for (let item of _data["items"])
//                     this.items.push(UserDto.fromJS(item));
//             }
//         }
//     }

//     static fromJS(data: any): UserDtoPageList {
//         data = typeof data === 'object' ? data : {};
//         let result = new UserDtoPageList();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["metadata"] = this.metadata ? this.metadata.toJSON() : <any>undefined;
//         if (Array.isArray(this.items)) {
//             data["items"] = [];
//             for (let item of this.items)
//                 data["items"].push(item.toJSON());
//         }
//         return data; 
//     }

//     clone(): UserDtoPageList {
//         const json = this.toJSON();
//         let result = new UserDtoPageList();
//         result.init(json);
//         return result;
//     }
// }

// export interface IUserDtoPageList {
//     metadata: PagedListMetaData;
//     items: UserDto[] | undefined;
// }

// export enum UserType {
//     _1 = 1,
//     _2 = 2,
//     _3 = 3,
// }

// export class VerifyCodeCommand implements IVerifyCodeCommand {
//     code: string | undefined;
//     email: string | undefined;

//     constructor(data?: IVerifyCodeCommand) {
//         if (data) {
//             for (var property in data) {
//                 if (data.hasOwnProperty(property))
//                     (<any>this)[property] = (<any>data)[property];
//             }
//         }
//     }

//     init(_data?: any) {
//         if (_data) {
//             this.code = _data["code"];
//             this.email = _data["email"];
//         }
//     }

//     static fromJS(data: any): VerifyCodeCommand {
//         data = typeof data === 'object' ? data : {};
//         let result = new VerifyCodeCommand();
//         result.init(data);
//         return result;
//     }

//     toJSON(data?: any) {
//         data = typeof data === 'object' ? data : {};
//         data["code"] = this.code;
//         data["email"] = this.email;
//         return data; 
//     }

//     clone(): VerifyCodeCommand {
//         const json = this.toJSON();
//         let result = new VerifyCodeCommand();
//         result.init(json);
//         return result;
//     }
// }

// export interface IVerifyCodeCommand {
//     code: string | undefined;
//     email: string | undefined;
// }

// export class ApiException extends Error {
//     message: string;
//     status: number; 
//     response: string; 
//     headers: { [key: string]: any; };
//     result: any; 

//     constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
//         super();

//         this.message = message;
//         this.status = status;
//         this.response = response;
//         this.headers = headers;
//         this.result = result;
//     }

//     protected isApiException = true;

//     static isApiException(obj: any): obj is ApiException {
//         return obj.isApiException === true;
//     }
// }

// function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
//     if (result !== null && result !== undefined)
//         return _observableThrow(result);
//     else
//         return _observableThrow(new ApiException(message, status, response, headers, null));
// }

// function blobToText(blob: any): Observable<string> {
//     return new Observable<string>((observer: any) => {
//         if (!blob) {
//             observer.next("");
//             observer.complete();
//         } else {
//             let reader = new FileReader(); 
//             reader.onload = event => { 
//                 observer.next((<any>event.target).result);
//                 observer.complete();
//             };
//             reader.readAsText(blob); 
//         }
//     });
// }